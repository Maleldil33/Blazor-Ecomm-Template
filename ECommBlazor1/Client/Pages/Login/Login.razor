@layout LoginLayout
@page "/login"

@using ECommBlazor1;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Web;
@using System.Net.Http;
@using System.Net.Http.Json
@using ECommBlazor1.Shared.Models;
@using ECommBlazor1.Shared.DTO;
@using System.Security.Claims;
@using ECommBlazor1.Client.Shared;
@using Microsoft.AspNetCore.WebUtilities;

@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject ICartService CartService

<html>
<head>
    <link rel="stylesheet" type="text/css" href="~/" />

    <title>My Shop</title>
</head>

<body>
        
        <EditForm Model="user" OnSubmit="LogIn">            
            <div class="form-control">
                <label for="username">Enter Email...</label>
                <InputText id="email" @bind-Value="user.Email" class="form-control"/>
            </div>
            <div class="form-control">
                <label for="password">Enter Password...</label>
                <InputText id="password" @bind-Value="user.Password" type="password"/>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
        <div class="text-danger>">
            <span>@errorMessage</span>
        </div>

</body>
</html>

@code {

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private UserLoginDTO user = new UserLoginDTO();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    protected async Task LogIn()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            //await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }

    }

    protected async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

}
