// <auto-generated />
using System;
using ECommBlazor1.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommBlazor1.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230417111514_Orders")]
    partial class Orders
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ECommBlazor1.Shared.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.CartItem", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId", "ProductTypeId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Books",
                            Url = "books"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drinks",
                            Url = "drinks"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Video-Games",
                            Url = "games"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Clothing",
                            Url = "clothing"
                        });
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId", "ProductTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Featured")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "The first two books of 'the book of the new sun' by renowned sci-fi author Gene Wolfe",
                            Featured = false,
                            ImageUrl = "https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1600272802l/55077689.jpg",
                            Title = "Shadow & Claw"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "C.S. Lewis's signature collection featuring a wide array of his fictional and Christian apolegetic works",
                            Featured = false,
                            ImageUrl = "https://images.thenile.io/r1000/9780007500192.jpg",
                            Title = "C.S. Lewis - The Signature Collection"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "A tasty beverage championed by athletes and programmers alike",
                            Featured = true,
                            ImageUrl = "https://www.restockit.com/images/product/xlarge/RDBRBD99124.jpg",
                            Title = "Red Bull"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "Classic game for the Nintendo Gamecube",
                            Featured = true,
                            ImageUrl = "https://cdn.mobygames.com/covers/6555565-metroid-prime-gamecube-front-cover.jpg",
                            Title = "Metroid Prime"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Building/Survival game available for many platforms",
                            Featured = false,
                            ImageUrl = "https://cdn.mobygames.com/covers/3364463-minecraft-nintendo-switch-front-cover.jpg",
                            Title = "Minecraft"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Description = "This hat is guaranteed to boost your confidence",
                            Featured = false,
                            ImageUrl = "https://stores.wholesalecentral.com/Images/NMJ6J950PK_892KUVGLGLO_CQQQWUF/5297112446201.jpg",
                            Title = "Cool Hat"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "Survival/social simulation game for the nintendo Gamecube",
                            Featured = false,
                            ImageUrl = "https://cdn.mobygames.com/covers/5216426-animal-crossing-gamecube-front-cover.jpg",
                            Title = "Animal Crossing"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Prophetic sci-fi novel by C.S. Lewis. This is the final volume of the space trilogy.",
                            Featured = false,
                            ImageUrl = "https://i.pinimg.com/originals/0b/5d/db/0b5ddb6157152090875ab9d181cb51ae.jpg",
                            Title = "That Hideous Strength"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Description = "Educational literature for teaching programmers about design patterns often encountered in object oriented programming.",
                            Featured = false,
                            ImageUrl = "https://i1.wp.com/springframework.guru/wp-content/uploads/2015/04/9780201633610.jpg?resize=520%2C648",
                            Title = "Design Patterns for Programmers"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "The king James holy bible in beautiful bound leather.",
                            Featured = true,
                            ImageUrl = "https://tvaraj.files.wordpress.com/2012/10/the-holy-bible.jpg",
                            Title = "King James Bible"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "A book you should read if you want to understand the global psychosis we're currently living through by Paul Levy",
                            Featured = false,
                            ImageUrl = "https://cdn2.penguin.com.au/covers/original/9781583945483.jpg",
                            Title = "Dispelling Wetiko"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Description = "Meditations by Marcus Aurelius",
                            Featured = false,
                            ImageUrl = "https://i.thenile.io/r1000/9781543286700.jpg?r=5f83a98257416",
                            Title = "Meditations"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            Description = "Certified hustler sneaks for making money or just posting up and lookin' fly.",
                            Featured = true,
                            ImageUrl = "https://assets.bigcartel.com/product_images/353466343/shoe+product+shot.png?auto=format&fit=max&w=1300",
                            Title = "Da Bob"
                        });
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Default"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Paperback"
                        },
                        new
                        {
                            Id = 3,
                            Name = "E-Book"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Audiobook"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Nintendo Gamecube"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Playstation 1"
                        },
                        new
                        {
                            Id = 7,
                            Name = "250ml"
                        },
                        new
                        {
                            Id = 8,
                            Name = "500ml"
                        },
                        new
                        {
                            Id = 9,
                            Name = "size 10"
                        },
                        new
                        {
                            Id = 10,
                            Name = "size 11"
                        });
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.ProductVariant", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ProductTypeId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductVariants");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductTypeId = 2,
                            OriginalPrice = 19.99m,
                            Price = 9.99m
                        },
                        new
                        {
                            ProductId = 1,
                            ProductTypeId = 3,
                            OriginalPrice = 0m,
                            Price = 7.99m
                        },
                        new
                        {
                            ProductId = 1,
                            ProductTypeId = 4,
                            OriginalPrice = 29.99m,
                            Price = 19.99m
                        },
                        new
                        {
                            ProductId = 2,
                            ProductTypeId = 2,
                            OriginalPrice = 14.99m,
                            Price = 7.99m
                        },
                        new
                        {
                            ProductId = 2,
                            ProductTypeId = 3,
                            OriginalPrice = 0m,
                            Price = 6.99m
                        },
                        new
                        {
                            ProductId = 3,
                            ProductTypeId = 7,
                            OriginalPrice = 0m,
                            Price = 3.99m
                        },
                        new
                        {
                            ProductId = 3,
                            ProductTypeId = 8,
                            OriginalPrice = 0m,
                            Price = 9.99m
                        },
                        new
                        {
                            ProductId = 4,
                            ProductTypeId = 5,
                            OriginalPrice = 0m,
                            Price = 19.99m
                        },
                        new
                        {
                            ProductId = 5,
                            ProductTypeId = 1,
                            OriginalPrice = 0m,
                            Price = 19.99m
                        },
                        new
                        {
                            ProductId = 6,
                            ProductTypeId = 1,
                            OriginalPrice = 0m,
                            Price = 29.99m
                        },
                        new
                        {
                            ProductId = 7,
                            ProductTypeId = 6,
                            OriginalPrice = 0m,
                            Price = 29.99m
                        },
                        new
                        {
                            ProductId = 8,
                            ProductTypeId = 6,
                            OriginalPrice = 0m,
                            Price = 29.99m
                        },
                        new
                        {
                            ProductId = 9,
                            ProductTypeId = 2,
                            OriginalPrice = 0m,
                            Price = 29.99m
                        },
                        new
                        {
                            ProductId = 9,
                            ProductTypeId = 3,
                            OriginalPrice = 0m,
                            Price = 29.99m
                        },
                        new
                        {
                            ProductId = 10,
                            ProductTypeId = 2,
                            OriginalPrice = 0m,
                            Price = 29.99m
                        },
                        new
                        {
                            ProductId = 10,
                            ProductTypeId = 3,
                            OriginalPrice = 0m,
                            Price = 19.99m
                        },
                        new
                        {
                            ProductId = 11,
                            ProductTypeId = 2,
                            OriginalPrice = 0m,
                            Price = 19.99m
                        },
                        new
                        {
                            ProductId = 11,
                            ProductTypeId = 3,
                            OriginalPrice = 0m,
                            Price = 19.99m
                        },
                        new
                        {
                            ProductId = 12,
                            ProductTypeId = 2,
                            OriginalPrice = 0m,
                            Price = 17.99m
                        },
                        new
                        {
                            ProductId = 12,
                            ProductTypeId = 3,
                            OriginalPrice = 0m,
                            Price = 12.99m
                        },
                        new
                        {
                            ProductId = 13,
                            ProductTypeId = 9,
                            OriginalPrice = 0m,
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = 13,
                            ProductTypeId = 10,
                            OriginalPrice = 0m,
                            Price = 149.99m
                        });
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.Address", b =>
                {
                    b.HasOne("ECommBlazor1.Shared.Models.User", null)
                        .WithOne("Address")
                        .HasForeignKey("ECommBlazor1.Shared.Models.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.OrderItem", b =>
                {
                    b.HasOne("ECommBlazor1.Shared.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommBlazor1.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommBlazor1.Shared.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.Product", b =>
                {
                    b.HasOne("ECommBlazor1.Shared.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.ProductVariant", b =>
                {
                    b.HasOne("ECommBlazor1.Shared.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommBlazor1.Shared.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ECommBlazor1.Shared.Models.User", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
